apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"tekton.dev/v1beta1","kind":"Pipeline","metadata":{"annotations":{},"name":"jx-demo-cd-pipeline","namespace":"jx"},"spec":{"params":[{"name":"repo-url"},{"default":"master","name":"repo-revision","type":"string"},{"name":"repo-infra"},{"name":"deploy-path"},{"name":"prod-deploy-path"}],"tasks":[{"name":"git-clone","params":[{"name":"deleteExisting","value":"true"},{"name":"url","value":"$(params.repo-url)"},{"name":"revision","value":"$(params.repo-revision)"}],"taskRef":{"name":"git-clone"},"workspaces":[{"name":"output","workspace":"source-workspace"}]},{"name":"sync-staging-to-prod","params":[{"name":"commit-describe","value":"$(tasks.git-clone.results.describe)"},{"name":"repo-infra","value":"$(params.repo-infra)"},{"name":"deploy-path","value":"$(params.deploy-path)"},{"name":"prod-deploy-path","value":"$(params.prod-deploy-path)"}],"taskRef":{"name":"sync-staging-to-prod"}}],"workspaces":[{"name":"source-workspace"},{"name":"cache-workspace"}]}}
  creationTimestamp: "2022-03-02T06:31:00Z"
  generation: 1
  labels:
    tekton.dev/pipeline: jx-demo-cd-pipeline
  managedFields:
  - apiVersion: tekton.dev/v1beta1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations: {}
      f:spec:
        .: {}
        f:params: {}
        f:pipelineRef:
          .: {}
          f:name: {}
        f:workspaces: {}
    manager: kubectl-client-side-apply
    operation: Update
    time: "2022-03-02T06:31:00Z"
  - apiVersion: tekton.dev/v1beta1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          f:kubectl.kubernetes.io/last-applied-configuration: {}
        f:labels:
          .: {}
          f:tekton.dev/pipeline: {}
      f:status:
        .: {}
        f:completionTime: {}
        f:conditions: {}
        f:pipelineSpec:
          .: {}
          f:params: {}
          f:tasks: {}
          f:workspaces: {}
        f:startTime: {}
        f:taskRuns:
          .: {}
          f:jx-demo-cd-pipeline-run-git-clone-hrkcd:
            .: {}
            f:pipelineTaskName: {}
            f:status:
              .: {}
              f:completionTime: {}
              f:conditions: {}
              f:podName: {}
              f:startTime: {}
              f:steps: {}
              f:taskResults: {}
              f:taskSpec:
                .: {}
                f:description: {}
                f:params: {}
                f:results: {}
                f:steps: {}
                f:workspaces: {}
          f:jx-demo-cd-pipeline-run-sync-staging-to-prod-gq6b4:
            .: {}
            f:pipelineTaskName: {}
            f:status:
              .: {}
              f:completionTime: {}
              f:conditions: {}
              f:podName: {}
              f:startTime: {}
              f:steps: {}
              f:taskSpec:
                .: {}
                f:params: {}
                f:steps: {}
    manager: controller
    operation: Update
    time: "2022-03-02T06:31:22Z"
  name: jx-demo-cd-pipeline-run
  namespace: jx
  resourceVersion: "20817182"
  selfLink: /apis/tekton.dev/v1beta1/namespaces/jx/pipelineruns/jx-demo-cd-pipeline-run
  uid: d9d78ff3-f842-4ddc-a402-b20901c8d7e8
spec:
  params:
  - name: repo-url
    value: http://gitlab.infra.com/devopsman/jx-demo
  - name: repo-revision
    value: ""
  - name: repo-image
    value: harbor.devopsman.io/devopsman/jx-demo
  - name: repo-infra
    value: gitlab.infra.com/devopsman/jx-demo-infra
  - name: deploy-path
    value: test-deploy-path
  - name: prod-deploy-path
    value: prod/jx-demo
  pipelineRef:
    name: jx-demo-cd-pipeline
  serviceAccountName: default
  timeout: 1h0m0s
  workspaces:
  - name: source-workspace
    persistentVolumeClaim:
      claimName: buildpacks-source-pvc
    subPath: source
  - name: cache-workspace
    persistentVolumeClaim:
      claimName: buildpacks-source-pvc
    subPath: cache
status:
  completionTime: "2022-03-02T06:31:22Z"
  conditions:
  - lastTransitionTime: "2022-03-02T06:31:22Z"
    message: 'Tasks Completed: 2 (Failed: 0, Cancelled 0), Skipped: 0'
    reason: Succeeded
    status: "True"
    type: Succeeded
  pipelineSpec:
    params:
    - name: repo-url
      type: string
    - default: master
      name: repo-revision
      type: string
    - name: repo-infra
      type: string
    - name: deploy-path
      type: string
    - name: prod-deploy-path
      type: string
    tasks:
    - name: git-clone
      params:
      - name: deleteExisting
        value: "true"
      - name: url
        value: $(params.repo-url)
      - name: revision
        value: $(params.repo-revision)
      taskRef:
        kind: Task
        name: git-clone
      workspaces:
      - name: output
        workspace: source-workspace
    - name: sync-staging-to-prod
      params:
      - name: commit-describe
        value: $(tasks.git-clone.results.describe)
      - name: repo-infra
        value: $(params.repo-infra)
      - name: deploy-path
        value: $(params.deploy-path)
      - name: prod-deploy-path
        value: $(params.prod-deploy-path)
      taskRef:
        kind: Task
        name: sync-staging-to-prod
    workspaces:
    - name: source-workspace
    - name: cache-workspace
  startTime: "2022-03-02T06:31:00Z"
  taskRuns:
    jx-demo-cd-pipeline-run-git-clone-hrkcd:
      pipelineTaskName: git-clone
      status:
        completionTime: "2022-03-02T06:31:14Z"
        conditions:
        - lastTransitionTime: "2022-03-02T06:31:14Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: jx-demo-cd-pipeline-run-git-clone-hrkcd-pod-fn9hb
        startTime: "2022-03-02T06:31:00Z"
        steps:
        - container: step-clone
          imageID: docker://sha256:ebbe9df4abf4dd9a739b33ab75d1fee2086713829a437f9d1e5e3de7b21e8d5f
          name: clone
          terminated:
            containerID: docker://63e7be8edabbcac493370419c5538c6d853c29f019960de2824a257cf84121b1
            exitCode: 0
            finishedAt: "2022-03-02T06:31:13Z"
            message: '[{"key":"commit","value":"3ae04a8f3b6c9ea59a4cfdd020548ba7bbb10ab5","type":"TaskRunResult"},{"key":"describe","value":"update
              to jx-demo keyword\n\nSee merge request devopsman/jx-demo!51","type":"TaskRunResult"},{"key":"url","value":"http://gitlab.infra.com/devopsman/jx-demo","type":"TaskRunResult"}]'
            reason: Completed
            startedAt: "2022-03-02T06:31:11Z"
        taskResults:
        - name: commit
          value: 3ae04a8f3b6c9ea59a4cfdd020548ba7bbb10ab5
        - name: describe
          value: |-
            update to jx-demo keyword

            See merge request devopsman/jx-demo!51
        - name: url
          value: http://gitlab.infra.com/devopsman/jx-demo
        taskSpec:
          description: |-
            These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
            The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
          params:
          - description: Repository URL to clone from.
            name: url
            type: string
          - description: Revision to checkout. (branch, tag, sha, ref, etc...)
            name: revision
            type: string
          - default: ""
            description: Refspec to fetch before checking out revision.
            name: refspec
            type: string
          - default: "true"
            description: Initialize and fetch git submodules.
            name: submodules
            type: string
          - default: "1"
            description: Perform a shallow clone, fetching only the most recent N
              commits.
            name: depth
            type: string
          - default: "true"
            description: Set the `http.sslVerify` global git config. Setting this
              to `false` is not advised unless you are sure that you trust your git
              remote.
            name: sslVerify
            type: string
          - default: ""
            description: Subdirectory inside the `output` Workspace to clone the repo
              into.
            name: subdirectory
            type: string
          - default: ""
            description: Define the directory patterns to match or exclude when performing
              a sparse checkout.
            name: sparseCheckoutDirectories
            type: string
          - default: "true"
            description: Clean out the contents of the destination directory if it
              already exists before cloning.
            name: deleteExisting
            type: string
          - default: ""
            description: HTTP proxy server for non-SSL requests.
            name: httpProxy
            type: string
          - default: ""
            description: HTTPS proxy server for SSL requests.
            name: httpsProxy
            type: string
          - default: ""
            description: Opt out of proxying HTTP/HTTPS requests.
            name: noProxy
            type: string
          - default: "true"
            description: Log the commands that are executed during `git-clone`'s operation.
            name: verbose
            type: string
          - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.21.0
            description: The image providing the git-init binary that this Task runs.
            name: gitInitImage
            type: string
          - default: /tekton/home
            description: |
              Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
              the gitInitImage param with an image containing custom user configuration.
            name: userHome
            type: string
          results:
          - description: The precise commit SHA that was fetched by this Task.
            name: commit
          - description: The precise URL that was fetched by this Task.
            name: url
          - description: The precise commit describe that was fetched by this Task.
            name: describe
          steps:
          - env:
            - name: HOME
              value: $(params.userHome)
            - name: PARAM_URL
              value: $(params.url)
            - name: PARAM_REVISION
              value: $(params.revision)
            - name: PARAM_REFSPEC
              value: $(params.refspec)
            - name: PARAM_SUBMODULES
              value: $(params.submodules)
            - name: PARAM_DEPTH
              value: $(params.depth)
            - name: PARAM_SSL_VERIFY
              value: $(params.sslVerify)
            - name: PARAM_SUBDIRECTORY
              value: $(params.subdirectory)
            - name: PARAM_DELETE_EXISTING
              value: $(params.deleteExisting)
            - name: PARAM_HTTP_PROXY
              value: $(params.httpProxy)
            - name: PARAM_HTTPS_PROXY
              value: $(params.httpsProxy)
            - name: PARAM_NO_PROXY
              value: $(params.noProxy)
            - name: PARAM_VERBOSE
              value: $(params.verbose)
            - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
              value: $(params.sparseCheckoutDirectories)
            - name: PARAM_USER_HOME
              value: $(params.userHome)
            - name: WORKSPACE_OUTPUT_PATH
              value: $(workspaces.output.path)
            - name: WORKSPACE_SSH_DIRECTORY_BOUND
              value: $(workspaces.ssh-directory.bound)
            - name: WORKSPACE_SSH_DIRECTORY_PATH
              value: $(workspaces.ssh-directory.path)
            - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
              value: $(workspaces.basic-auth.bound)
            - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
              value: $(workspaces.basic-auth.path)
            image: $(params.gitInitImage)
            name: clone
            resources: {}
            script: |
              #!/usr/bin/env sh
              set -eu

              if [ "${PARAM_VERBOSE}" = "true" ] ; then
                set -x
              fi

              if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
                cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
                chmod 400 "${PARAM_USER_HOME}/.git-credentials"
                chmod 400 "${PARAM_USER_HOME}/.gitconfig"
              fi

              if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                chmod 700 "${PARAM_USER_HOME}"/.ssh
                chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
              fi

              CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

              cleandir() {
                # Delete any existing contents of the repo directory if it exists.
                #
                # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
                # or the root of a mounted volume.
                if [ -d "${CHECKOUT_DIR}" ] ; then
                  # Delete non-hidden files and directories
                  rm -rf "${CHECKOUT_DIR:?}"/*
                  # Delete files and directories starting with . but excluding ..
                  rm -rf "${CHECKOUT_DIR}"/.[!.]*
                  # Delete files and directories starting with .. plus any other character
                  rm -rf "${CHECKOUT_DIR}"/..?*
                fi
              }

              if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
                cleandir
              fi

              test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
              test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
              test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

              /ko-app/git-init \
                -url="${PARAM_URL}" \
                -revision="${PARAM_REVISION}" \
                -refspec="${PARAM_REFSPEC}" \
                -path="${CHECKOUT_DIR}" \
                -sslVerify="${PARAM_SSL_VERIFY}" \
                -submodules="${PARAM_SUBMODULES}" \
                -depth="${PARAM_DEPTH}" \
                -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
              cd "${CHECKOUT_DIR}"
              ls -la
              RESULT_SHA="$(git rev-parse HEAD)"
              COMMIT_DESCRIBE="$(git log -1 --pretty=format:%b ${RESULT_SHA})"
              COMMIT_DESCRIBE_TITLE="$(git log -1 --pretty=format:%s ${RESULT_SHA})"
              if [ "${COMMIT_DESCRIBE}" = "" ] ; then
                  COMMIT_DESCRIBE="${COMMIT_DESCRIBE_TITLE}"
              fi
              EXIT_CODE="$?"
              if [ "${EXIT_CODE}" != 0 ] ; then
                exit "${EXIT_CODE}"
              fi
              printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
              printf "%s" "${PARAM_URL}" > "$(results.url.path)"
              printf "%s" "${COMMIT_DESCRIBE}" > "$(results.describe.path)"
          workspaces:
          - description: The git repo will be cloned onto the volume backing this
              Workspace.
            name: output
          - description: |
              A .ssh directory with private key, known_hosts, config, etc. Copied to
              the user's home before git commands are executed. Used to authenticate
              with the git remote when performing the clone. Binding a Secret to this
              Workspace is strongly recommended over other volume types.
            name: ssh-directory
            optional: true
          - description: |
              A Workspace containing a .gitconfig and .git-credentials file. These
              will be copied to the user's home before any git commands are run. Any
              other files in this Workspace are ignored. It is strongly recommended
              to use ssh-directory over basic-auth whenever possible and to bind a
              Secret to this Workspace over other volume types.
            name: basic-auth
            optional: true
    jx-demo-cd-pipeline-run-sync-staging-to-prod-gq6b4:
      pipelineTaskName: sync-staging-to-prod
      status:
        completionTime: "2022-03-02T06:31:22Z"
        conditions:
        - lastTransitionTime: "2022-03-02T06:31:22Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: jx-demo-cd-pipeline-run-sync-staging-to-prod-gq6b4-pod-bdr9l
        startTime: "2022-03-02T06:31:14Z"
        steps:
        - container: step-update-yaml-push
          imageID: docker-pullable://cnych/helm-kubectl-curl-git-jq-yq@sha256:59dff29d15bb23cc730892931a3887174f225cbd8763eccbf4425458b36b2374
          name: update-yaml-push
          terminated:
            containerID: docker://d2d1312f41c5bc573711ae1d583d5484b837eaaad30653577415db98afcd6a76
            exitCode: 0
            finishedAt: "2022-03-02T06:31:22Z"
            reason: Completed
            startedAt: "2022-03-02T06:31:20Z"
        taskSpec:
          params:
          - default: gitlab.infra.com/devopsman/jx-demo-infra.git
            description: Git repository containing manifest files to update
            name: repo-infra
            type: string
          - default: jx-demo
            description: Manifests files dir
            name: deploy-path
            type: string
          - default: cnych/helm-kubectl-curl-git-jq-yq
            name: commit-image
            type: string
          - default: pipeline@k8s.local
            name: git-email
            type: string
          - default: Tekton Pipeline
            name: git-name
            type: string
          - name: prod-deploy-path
            type: string
          - name: commit-describe
            type: string
          steps:
          - args:
            - -c
            - |
              set -eu
              echo Load environment variables from previous steps
              # source /workspace/env-config

              echo Cloning config project

              git config --global user.email "$(params.git-email)"
              git config --global user.name "$(params.git-name)"
              git clone --branch master --depth 1 http://${GIT_USERNAME}:${GIT_PASSWORD}@$(params.repo-infra) repo

              echo Cloned

              cd repo && ls -l

              echo Replacing dev config to prod config

              yq w -i  $(params.prod-deploy-path)/values.yaml 'image.repository'  $(/bin/cat  $(params.deploy-path)/values.yaml | yq r - 'image.repository')
              yq w -i  $(params.prod-deploy-path)/values.yaml 'image.tag'  $(/bin/cat  $(params.deploy-path)/values.yaml | yq r - 'image.tag')
              yq w -i  $(params.prod-deploy-path)/values.yaml 'image.oldtag'  $(/bin/cat $(params.deploy-path)/values.yaml | yq r - 'image.oldtag')

              echo Replaced

              echo verifying new value

              echo $(/bin/cat  $(params.prod-deploy-path)/values.yaml | yq r - 'image')

              if ! git diff-index --quiet HEAD --; then
                          git status
                          git add .
                          git commit -m "Auto: $(params.commit-describe)"
                          git push
                        else
                            echo "no changes, git repository is up to date"
                        fi
            command:
            - /bin/bash
            env:
            - name: GIT_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: github-token
                  optional: true
            - name: GIT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: github-token
                  optional: true
            image: $(params.commit-image)
            name: update-yaml-push
            resources: {}
